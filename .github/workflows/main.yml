name: Fetch Pull Request Comment

on:
  push:
    branches:
      - main

jobs:
  fetch_pr_comment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v2

      - name: Get all open pull requests
        id: get_prs
        run: |
          TARGET_REPO="ritadutta/testing_fu"
          # Fetch all open pull requests
          PR_LIST=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$TARGET_REPO/pulls?state=open&sort=updated&direction=desc")
          echo "PR List: $PR_LIST"
          PR_NUMBERS=$(echo "$PR_LIST" | jq -r '.[].number' | tr '\n' ' ')
          if [ -z "$PR_NUMBERS" ]; then
            echo "No open pull requests found."
            exit 1
          fi
          echo "::set-output name=pr_numbers::$PR_NUMBERS"

      - name: Fetch latest comment from all open pull requests
        id: fetch_latest_comment
        run: |
          TARGET_REPO="ritadutta/testing_fu"
          PR_NUMBERS=(${{ steps.get_prs.outputs.pr_numbers }})
          LATEST_COMMENT=""
          LATEST_COMMENT_DATE="1970-01-01T00:00:00Z"

          for PR_NUMBER in "${PR_NUMBERS[@]}"; do
            echo "Fetching comments for PR: $PR_NUMBER in repo: $TARGET_REPO"
            PR_COMMENTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/$TARGET_REPO/issues/$PR_NUMBER/comments")
            echo "PR Comments: $PR_COMMENTS"
            if echo "$PR_COMMENTS" | jq . >/dev/null 2>&1; then
              for COMMENT in $(echo "$PR_COMMENTS" | jq -c '.[]'); do
                COMMENT_BODY=$(echo "$COMMENT" | jq -r '.body')
                COMMENT_DATE=$(echo "$COMMENT" | jq -r '.created_at')
                if [[ "$COMMENT_DATE" > "$LATEST_COMMENT_DATE" ]]; then
                  LATEST_COMMENT="$COMMENT_BODY"
                  LATEST_COMMENT_DATE="$COMMENT_DATE"
                fi
              done
            else
              echo "Failed to parse comments for PR: $PR_NUMBER"
            fi
          done

          if [ -z "$LATEST_COMMENT" ]; then
            echo "No comments found."
            echo "::set-output name=success::false"
          else
            echo "Latest PR Comment: $LATEST_COMMENT"
            echo "::set-output name=latest_comment::$LATEST_COMMENT"
            echo "::set-output name=success::true"
          fi

      - name: Extract URL from the latest PR comment
        if: ${{ steps.fetch_latest_comment.outputs.success == 'true' }}
        id: extract_url
        run: |
          LATEST_COMMENT="${{ steps.fetch_latest_comment.outputs.latest_comment }}"
          if [[ $LATEST_COMMENT =~ (http.*com) ]]; then
            URL="${BASH_REMATCH[1]}"
            echo "Found URL: $URL"
            echo "::set-output name=url::$URL"
            echo "::set-output name=success::true"
          else
            echo "No matching URL found"
            echo "::set-output name=success::false"
          fi

      - name: Cache dependencies
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ~/.cache
            /opt/allure
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: Checkout code again (if needed)
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        uses: actions/checkout@v2

      - name: Install Chromium
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        run: sudo apt install chromium-browser

      - name: Use Node.js
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        uses: actions/setup-node@v1
        with:
           node-version: 16.15.1

      - name: Install dependencies
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        run: npm install

      - name: Run E2E tests
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        run: npx cross-env BASE_URL=${{ steps.extract_url.outputs.url }} npm run web

      - name: Download and Install Allure
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        run: |
           wget https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.16.0/allure-commandline-2.16.0.zip
           unzip allure-commandline-2.16.0.zip
           sudo mv allure-2.16.0 /opt/allure
           sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Generate Allure Reports
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        run: |
           allure generate allure-results --clean -o allure-report

      - name: Publish Allure Reports
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        uses: peaceiris/actions-gh-pages@v3
        with:
           github_token: ${{ secrets.GITHUB_TOKEN }}
           publish_dir: ./allure-report
