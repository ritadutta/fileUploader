name: Fetch Pull Request Comment

on:
  push:
    branches:
      - main

jobs:
  fetch_pr_comment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v2

      - name: Get the latest pull request and commit SHA from the target repo
        id: get_pr_and_commit_sha
        run: |
          TARGET_REPO="ritadutta/testing_fu"
          # Fetch the latest pull request
          PR_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$TARGET_REPO/pulls?state=open&sort=updated&direction=desc" | jq -r '.[0]')
          
          PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
          COMMIT_SHA=$(echo "$PR_INFO" | jq -r '.head.sha')
          
          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" == "null" ]; then
            echo "No pull request found."
            exit 1
          fi

          echo "Fetching PR number $PR_NUMBER with commit SHA $COMMIT_SHA from repo $TARGET_REPO"
          echo "::set-output name=commit_sha::$COMMIT_SHA"
          echo "::set-output name=pr_number::$PR_NUMBER"
      
      - name: Fetch PR Comment from the target repo
        id: fetch_pr_comment
        run: |
          TARGET_REPO="ritadutta/testing_fu"
          PR_NUMBER=${{ steps.get_pr_and_commit_sha.outputs.pr_number }}
          echo "Fetching comments for PR: $PR_NUMBER in repo: $TARGET_REPO"
          PR_COMMENTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$TARGET_REPO/issues/$PR_NUMBER/comments?sort=created&direction=desc")
          echo "API Response: $PR_COMMENTS"
          COMMENT_BODY=$(echo "$PR_COMMENTS" | jq -r '.[0].body')
          if [ -z "$COMMENT_BODY" ] || [ "$COMMENT_BODY" == "null" ]; then
            echo "No comments found or invalid response format."
            echo "::set-output name=success::false"
          else
            echo "Latest PR Comment: $COMMENT_BODY"
            echo "::set-output name=pr_comment::$COMMENT_BODY"
            echo "::set-output name=success::true"
          fi

      - name: Extract URL from PR Comment
        if: ${{ steps.fetch_pr_comment.outputs.success == 'true' }}
        id: extract_url
        run: |
          PR_COMMENT="${{ steps.fetch_pr_comment.outputs.pr_comment }}"
          if [[ $PR_COMMENT =~ (http.*com) ]]; then
            URL="${BASH_REMATCH[1]}"
            echo "Found URL: $URL"
            echo "::set-output name=url::$URL"
            echo "::set-output name=success::true"
          else
            echo "No matching URL found"
            echo "::set-output name=success::false"
          fi

      - name: Cache dependencies
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ~/.cache
            /opt/allure
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: Checkout code again (if needed)
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        uses: actions/checkout@v2

      - name: Install Chromium
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        run: sudo apt install chromium-browser

      - name: Use Node.js
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        uses: actions/setup-node@v1
        with:
           node-version: 16.15.1

      - name: Install dependencies
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        run: npm install

      - name: Run E2E tests
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        run: npx cross-env BASE_URL=${{ steps.extract_url.outputs.url }} npm run web

      - name: Download and Install Allure
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        run: |
           wget https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.16.0/allure-commandline-2.16.0.zip
           unzip allure-commandline-2.16.0.zip
           sudo mv allure-2.16.0 /opt/allure
           sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Generate Allure Reports
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        run: |
           allure generate allure-results --clean -o allure-report

      - name: Publish Allure Reports
        if: ${{ steps.extract_url.outputs.success == 'true' }}
        uses: peaceiris/actions-gh-pages@v3
        with:
           github_token: ${{ secrets.GITHUB_TOKEN }}
           publish_dir: ./allure-report
